<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>Document</title>
        <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    </head>
    <body>
        <form name="register-form">
            <label for="name">이름</label>
            <!-- 비동기시 require 처리 안됨 -->
            <input type="text" id="name" required /><br />
            <label for="email">이메일</label>
            <input type="email" name="email" id="email" /><br />
            <button type="button" onclick="ajaxGet()">ajax get 제출</button>
            <button type="button" onclick="ajaxPost()">ajax post 제출</button>
            <button type="button" onclick="axiosGet()">axios get 제출</button>
            <button type="button" onclick="axiosPost()">axios Post 제출</button>
            <button type="button" onclick="fetchGet()">fetch get 제출</button>
            <button type="button" onclick="fetchPost()">fetch post 제출</button>
        </form>
        <div class="result"></div>

        <script>
            const resultBox = document.querySelector('.result');
            function ajaxGet() {
                // form 가져오기
                const form = document.forms['register-form'];
                const data = {
                    name: form.name.value,
                    email: form.email.value,
                };
                // ajax get
                $.ajax({
                    // 프론트 → 백엔드
                    type: 'GET',
                    url: '/ajax',
                    data: data,
                    // 백엔드에서 데이터를 받아옴
                    success: function (res) {
                        console.log('res :', res);
                        resultBox.textContent = `${res.name} ${res.email}`;
                    },
                });
            }
            function ajaxPost() {
                // 폼 가져오기
                const form = document.forms['register-form'];

                // 예외처리 : 사용자가 이름을 입력하지 않았을 때
                if (form.name.value === '') {
                    alert('이름을 입력하세요');
                    return; // 함수 강제 종료
                }
                // ajax post
                $.ajax({
                    // 프론트 → 백엔드
                    type: 'POST',
                    url: '/ajax',
                    data: {
                        name: form.name.value,
                        email: form.email.value,
                    },
                    // 백엔드에서 받은 데이터 처리
                    success: function (res) {
                        console.log('res :', res);
                        resultBox.textContent = `${res.username}님 주소 ${res.email}`;
                    },
                });
            }
            function axiosGet() {
                const form = document.forms['register-form'];
                const data = {
                    username: form.name.value,
                    mail: form.email.value,
                };
                // axios Get
                axios({
                    method: 'GET',
                    // url 변수를 만들어 url & data를 하나로 합칠 수 있다.(Get 방식만 가능하다)
                    url: '/axios',
                    // 프론트 → 백엔드 데이터 : axios get → params
                    params: data,
                }).then((res) => {
                    console.log('res : ', res);
                    resultBox.textContent = `${res.data.username}님 주소 ${res.data.mail}`;
                });
            }
            // Promise 기반 axios : async & await 사용
            async function axiosPost() {
                const data = {
                    username: document.querySelector('#name').value,
                    email: document.querySelector('#email').value,
                };
                // 방법 1.
                // axios({
                //     method: 'POST',
                //     url: '/axios',
                //     // 프론트 → 백엔드 데이터 : axios post → data 객체
                //     data: data,
                // }).then((res) => {
                //     console.log('res', res);
                // });
                try {
                    // 방법 2. async ~ await
                    const res = await axios({
                        method: 'POST',
                        url: '/axios',
                        data: data,
                    });
                    console.log(res);
                    const { name, address } = res.data;
                    resultBox.textContent = name + address;
                } catch (error) {
                    console.log(error);
                }
            }

            function fetchGet() {
                const form = document.forms['register-form'];
                // 백엔드 url 입력 시 전송할 데이터 : 쿼리스트링(GET) 방식으로 전달
                const url = `?name=${form.name.value}&email=${form.email.value}`;
                // fetch(url, 프론트 ↔ 백엔드 연동 객체 )
                fetch(`/fetch${url}`, {
                    method: 'GET',
                })
                    .then((res) => {
                        console.log('res', res);
                        // res → json 형태 : json 응답을 네이티브 javascript 객체로 파싱해야함!
                        return res.json();
                    })
                    .then((data) => {
                        console.log('data', data);
                        resultBox.textContent = `${data.name}님 주소는 ${data.email}`;
                    });
            }
            function fetchPost() {
                const data = {
                    username: document.querySelector('#name').value,
                    email: document.querySelector('#email').value,
                };
                // fetch(url, 객체)
                fetch(`/fetch`, {
                    method: 'POST',
                    body: JSON.stringify(data), // data 객체를 문자열 변환
                    // 전송 타입 headers
                    headers: {
                        'Content-type': 'application/json',
                    },
                })
                    .then((res) => {
                        console.log('res', res);
                        // res → json 형태 : json 응답을 네이티브 javascript 객체로 파싱해야함!
                        return res.json();
                    })
                    .then((data) => {
                        console.log(data);
                        resultBox.textContent = `${data.username}님 주소 ${data.email}`;
                    });
            }
        </script>
    </body>
</html>
